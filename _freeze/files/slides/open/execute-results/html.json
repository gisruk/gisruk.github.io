{
  "hash": "b7557d51b5aef830b2153d50e0635fec",
  "result": {
    "markdown": "---\ntitle: \"<span style='font-size:.8em; font-weight: 500;'>Welcome to</span><br><span style='font-size:1.3em; font-weight: 700;'>GISRUK 2024</span>\"\nsubtitle: \"<br><span style='font-size:1.6em; font-weight: 500;'>9th -- 12th April 2024</span><br><span style='color:#525252; font-size:1.2em; font-weight: 500; font-family: Iosevka'>2024.gisruk.org @GISRUK </span>\"\nformat: \n   revealjs:\n     transition: fade\n     theme: theme/slides-theme.scss\n     css: theme/style.css\n     footer: 'GISRUK 2024 | University of Leeds'\n     mainfont: Jost\n     logo: \"../../img/favicon/gisruk.png\"\n---\n\n\n\n## GISRUK 2024\n\n### -- Local Organising Committee\n\n\n![](img/roger_beecham.jpeg){.absolute top=250 left=0 width=\"15%\"}\n![](img/will_james.jpeg){.absolute top=250 left=160 width=\"15%\"}\n![](img/fran_pontin.jpeg){.absolute top=250 left=350 width=\"15%\"}\n![](img/rachel_oldroyd.jpeg){.absolute top=250 left=500 width=\"15%\"}\n![](img/nick_hood.jpeg){.absolute top=250 left=650 width=\"15%\"}\n![](img/kieran_suchak.jpeg){.absolute top=250 left=800 width=\"15%\"}\n\n![](img/vikki_houlden.jpeg){.absolute top=450 left=350 width=\"15%\"}\n\n![](img/arjan_gosal.jpeg){.absolute top=450 left=500 width=\"14.5%\"}\n\n\n::: {.notes}\n\n\n:::\n\n---\n\n## GISRUK 2024\n\n### -- Info \n\n::: {.columns}\n\n\n::: {.column width=\"70%\"}\n\n![](img/website.png){fig-align=\"center\"}\n:::\n\n\n::: {.column width=\"30%\"}\n\n::: {style=\"font-family: Iosevka; font-size: 70%\"}\n<br>\nhttps://2024.gisruk.org/\n\n:::\n\n:::\n\n:::\n\n::: {.notes}\n\n:::\n\n---\n\n## GISRUK 2024\n\n### -- Info \n\n::: {.columns}\n\n\n::: {.column width=\"70%\"}\n\n![](img/website.png){fig-align=\"center\"}\n:::\n\n\n::: {.column width=\"30%\"}\n\n::: {style=\"font-family: Iosevka; font-size: 70%\"}\n<br>\nhttps://2024.gisruk.org/\n\n:::\n\n:::\n\n:::\n\n::: {.notes}\n\nShow programme.\nTwo parallel tracks -- generally\nLinks to full papers.\n\nThu lunch -- poster session.\nLunch and refreshments Merchant's Hall.\n\nFirst aiders are on-site as part of venue.\nLet us know -- LOC -- or Volunteers in green t-shirts if have any questions. \n\n\n\n:::\n\n---\n\n## GISRUK 2024\n\n### -- Awards\n\n* GISRUK & OSGeo:UK GoFundGeo Award\n* CASA Best Spatial Analysis Paper\n* GISRUK Best Paper, Best PGR Paper, Best Poster\n\n### -- SI\n\n* Environment &Planning B Urban Data:Code, see `2024.gisruk.org/si`\n\n\n::: {.notes}\n\n:::\n\n---\n\n## GISRUK 2024\n\n### -- Socials\n\n![](img/event_buildings.png){.absolute top=200 left=0 width=\"75%\"}\n\n\n::: {.notes}\nAlso checkout pubs on website. \n:::\n\n---\n\n## GISRUK 2024\n\n### -- Thanks to ...\n<br>\n\n... Sponsors\n\n... LOC\n\n... GISRUK Steering Group\n\n... Reviewers\n\n... Session chairs\n\n... Participants\n\n![](img/sponsors.png){.absolute top=250 left=500 width=\"50%\"}\n\n\n---\n\n\n## GISRUK 2024\n\n### -- Welcome\n\n::: {.columns}\n\n\n::: {.column width=\"15%\"}\n![](img/alan_haywood.jpg){.absolute top=225 left=20 width=\"10%\"}\n:::\n\n::: {.column width=\"80%\"}\n\n<br>\n**Professor Alan Haywood**<br>\n-- Interim Executive Faculty Dean<br>\n-- Professor of Palaeoclimate Modelling\n\n:::\n\n:::\n\n---\n\n\n### Generating layouts\n\n<br>\n\n::: {.columns}\n\n\n::: {.column width=\"70%\"}\n\n![](img/gridmap_observable.png){fig-align=\"center\"}\n\n:::\n\n:::\n\n::: footer\n:::\n\n::: {.notes}\n\nAnd also later implemented in javascript in this Observable notebook by Jo Wood.\n\n\n:::\n\n\n---\n\n### `gridmappr` for generating layouts\n\n::: {.columns}\n\n::: {.column width=\"35%\"}\n::: {.fragment .fade-in}\n![](img/france_map.png){.absolute top=150 left=0 width=\"30%\"}\n:::\n::: {.fragment .fade-in}\n![](img/france_grid.png){.absolute top=180 left=320 width=\"32%\"}\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment .fade-in}\n![](img/0_6_1312_c.png){.absolute top=140 left=730 width=\"35%\"}\n:::\n:::\n\n\n\n:::\n\n\n::: footer\n:::\n\n::: {.notes}\n\nGridmappr uses this latter approach.\n\n1. Start with real spatial units \n2. Specify a grid containing at least as many cells as spatial units in the real geography -- these are candidate positions that spatial units might be allocated to.\n3. Allocate to grid such that sum of distance distortion between real and grid centroids is minimised. \n\n\n:::\n\n---\n\n\n### `gridmappr` for generating layouts\n\n\n::: {.columns}\n\n::: {.column width=\"35%\"}\n\n![](img/france_map.png){.absolute top=150 left=0 width=\"30%\"}\n\n![](img/france_grid.png){.absolute top=180 left=320 width=\"32%\"}\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n![](img/0_6_1213_dis.png){.absolute top=140 left=730 width=\"35%\"}\n:::\n:::\n\n\n\n\n\n::: footer\n:::\n\n::: {.notes}\n\nGridmappr uses this latter approach.\n\n1. Start with real spatial units \n2. Specify a grid containing at least as many cells as spatial units in the real geography -- these are candidate positions that spatial units might be allocated to.\n3. Allocate to grid such that sum of distance distortion between real and grid centroids is minimised. \n\n\n:::\n\n---\n\n\n### `gridmappr` for generating layouts\n\n<br>\n\n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 65%;\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints_to_grid(\n  pts=...,\n  n_row=...,\n  n_col=...,\n  compactness=...,\n  spacers=list(...)\n)\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\" .fragment .fade-in style=\"font-size: 60%;\"}\n\n* `pts` A tibble of geographic points `(x,y)` to be allocated to a grid.\n    \n* `n_row`  Maximum number of rows in grid.\n    \n* `n_col` Maximum number of columns in grid.\n    \n* `compactness` Parameter between `0` and `1` where `0` allocates towards edges, `0.5` preserves scaled geographic location and `1` allocates towards centre of grid.\n    \n* `spacers` Optional list of grid cell locations defining grid location of fixed spacers which cannot be allocated points. Coordinates are in `(row, column)` order with the origin `(1,1)` in the bottom-left. The default is an empty list.\n\n\n:::\n\n:::\n\n::: footer\n:::\n\n::: {.notes}\n\nSMWGs -- introduces a grid of candidate positions.\n\nAllocated to grid positions based on mutliple criteria -- distance, shape preserving criteria. \n4. Compactness parameter -- useful for geographies with holes in them\n5. Spacers -- useful for geographies with non-contiguous\n\n\npoints_to_grid \n1. Given a set of geographic point locations : show\n2. And a grid of stated row, col dimensions\n3. Algorithm places points in grid cell such that total squared distances btw geog and grid is minimised.  \n4. If the number of grid cells is greater than the number of points to allocate, the algorithm chooses where to leave gaps\n5. So this is a version of Meulemans 2017\n\n\n\n1. So this is a version of Meulemans 2017\n2. But constrained by one other parameter : compactness\n3. A value of 1 places points as close to the grid as possible; a values of .5 attempts to place each point at its relative geographic position scaled within the bounds of the grid. A value of 1 attempts to place each point as close to the centre of the grid as possible while as compactness tends towards 0, cells are allocated increasingly towards the edge of the grid.\n4. Its effect varies depending on how many free spaces there are in the grid.\n\n\ngridmappr is an R implementation of Jo Wood's Observable notebook on gridmap allocation.\nAs with this, we use Linear Programming -- via ompr --  for describing and solving the layout constraints\n\n\n:::\n  \n---\n\n### `gridmappr` for generating layouts\n\n<br>\n\n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 65%;\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,3,4\"}\npoints_to_grid(\n  pts=...,\n  n_row=...,\n  n_col=...,\n  compactness=...,\n  spacers=list(...)\n)\n```\n:::\n\n\n\n:::\n\n\n::: {.column width=\"60%\" style=\"font-size: 60%;\"}\n\n* `pts` A tibble of geographic points `(x,y)` to be allocated to a grid.\n    \n* `n_row`  Maximum number of rows in grid.\n    \n* `n_col` Maximum number of columns in grid.\n\n:::\n\n:::\n\n::: footer\n:::\n\n\n---\n\n### `gridmappr` for generating layouts\n\n<br>\n\n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints_to_grid(\n  pts=...,\n  n_row=...,\n  n_col=...,\n  compactness=...,\n  spacers=list(...)\n)\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\" style=\"font-size: 50%;\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#    row col               area_name\n# 1    9   7                   Aisne\n# 2    5   6                  Allier\n# 3    4   9            Hautes-Alpes\n# 4    3  10         Alpes-Maritimes\n# 5    7   9             Haute-Saône\n# 6    1   3         Hautes-Pyrénées\n# 7    8   8                    Aube\n# 8    1   5                    Aude\n# 9    2   6                 Aveyron\n# 10   1   7                 Hérault\n# 11   8   5          Hauts-de-Seine\n# 12  10   2                Calvados\n# 13   4   5                  Cantal\n# 14   4   1       Charente-Maritime\n# 15   6   5                    Cher\n# 16   4   8                   Isère\n# 17   3   6                  Lozère\n# 18   9   1           Côtes-d'Armor\n# 19   8   6            Val-de-Marne\n# 20   9   5                   Paris\n```\n:::\n\n\n\n::: \n:::\n\n\n::: footer\n:::\n\n\n---\n\n\n### `gridmappr` for generating layouts\n\n\n![](img/grid_1010.png){.absolute top=160 left=0 width=\"35%\"}\n![](img/grid_1212.png){.absolute top=160 left=330 width=\"35%\"}\n![](img/grid_1414.png){.absolute top=160 left=660 width=\"35%\"}\n\n\n::: {.fragment .fade-in}\n![](img/0_6_1010.png){.absolute top=160 left=0 width=\"35%\"}\n![](img/0_6_1212.png){.absolute top=160 left=330 width=\"35%\"}\n![](img/0_6_1414.png){.absolute top=160 left=660 width=\"35%\"}\n:::\n\n\n\n\n\n\n\n::: footer\n:::\n\n::: {.notes}\n\n\n\n4. The larger the grid dimensions -- the more cells the grid contains -- the closer to real geography.\n5. The smaller the grid, the more context is lost.\n\n\n:::\n\n---\n\n\n### `gridmappr` for generating layouts\n\n<br>\n\n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 70%;\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npoints_to_grid(\n  pts=...,\n  n_row=...,\n  n_col=...,\n  compactness=...,\n  spacers=list(...)\n)\n```\n:::\n\n\n:::\n\n::: {.column width=\"60%\" style=\"font-size: 60%;\"}\n\n\n* `compactness` Parameter between `0` and `1` where `0` allocates towards edges, `0.5` preserves scaled geographic location and `1` allocates towards centre of grid.\n    \n\n\n::: \n:::\n\n\n::: footer\n:::\n\n\n---\n\n### `gridmappr` for generating layouts\n\n\n![](img/1_1213_grid.png){.absolute top=160 left=0 width=\"35%\"}\n\n![](img/0_5_1213_grid.png){.absolute top=160 left=330 width=\"35%\"}\n\n![](img/0_1213_grid.png){.absolute top=160 left=660 width=\"35%\"}\n\n:::{.fragment .fade-in}\n\n![](img/1_1213.png){.absolute top=160 left=0 width=\"35%\"}\n\n:::\n\n:::{.fragment .fade-in}\n\n![](img/0_1213.png){.absolute top=160 left=660 width=\"35%\"}\n\n:::\n\n:::{.fragment .fade-in}\n\n![](img/0_5_1213.png){.absolute top=160 left=330 width=\"35%\"}\n\n:::\n\n::: footer\n:::\n\n\n---\n\n\n### `gridmappr` for generating layouts\n\n<br>\n\n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 70%;\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\npoints_to_grid(\n  pts=...,\n  n_row=...,\n  n_col=...,\n  compactness=...,\n  spacers=list(...)\n)\n```\n:::\n\n\n\n\n:::\n\n::: {.column width=\"60%\" style=\"font-size: 60%;\"}\n\n\n* `spacers` Optional list of grid cell locations defining grid location of fixed spacers which cannot be allocated points. Coordinates are in `(row, column)` order with the origin `(1,1)` in the bottom-left. The default is an empty list.\n    \n\n::: \n:::\n\n::: footer\n:::\n\n---\n\n\n### `gridmappr` for generating layouts\n\n\n![](img/1213_spacers_grid_empty.png){.absolute top=140 left=20 width=\"40%\"}\n![](img/1213_spacers_grid.png){.absolute top=140 left=450 width=\"40%\"}\n\n:::{.fragment .fade-in}\n![](img/1213_spacers_empty.png){.absolute top=140 left=20 width=\"40%\"}\n\n![](img/1213_spacers.png){.absolute top=140 left=450 width=\"40%\"}\n\n:::\n\n::: footer\n:::\n\n::: {.notes}\n\n1. And we can also add in spacers -- reserved cells that cannot be allocated to the grid. This helps us to, for example, separate non-contiguous geographies.  \n\n:::\n\n\n---\n\n# `ggplot2` for gridmap design \n\n---\n\n<!-- ### `ggplot2` for gridmap design  -->\n\n### Create `sf` gridmap object\n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 50%;\"}\n\n<br><br>\n\n::: {.cell}\n\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/example_poly_france.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n\n* Once layout is generated, it is straightforward to use in standard \nggplot2. \n*  Handing over to ggplot2 as soon as possible -- because \nit provides a really useful structure/framework for generating an analysis.\n* Demonstrate this through an analysis of 2021 Census travel to work data in London\n* Returning to some analysis that I did some time ago with 2011 data.\n* Also: Think about *what is it* that these sorts of layouts -- and maps more generally -- hope to achieve?\n  \n  \n:::\n  \n  \n---\n\n<!-- ### `ggplot2` for gridmap design  -->\n \n### Create `sf` gridmap object \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_grid(france, n_row, n_col) |> \n   ggplot() +\n   geom_sf() \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/example_poly_grid2.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n  \n:::\n  \n  \n---\n\n### Create `sf` gridmap object\n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,5\"}\nmake_grid(france, n_row, n_col) |> \n   inner_join(solution) |>\n   ggplot() +\n   geom_sf() \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/example_poly2.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n<!-- ### `ggplot2` for gridmap design  -->\n### Plot `sf` gridmap object\n\n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,5,6,7\"}\nmake_grid(france, n_row, n_col) |> \n   inner_join(solution) |>\n   ggplot() +\n   geom_sf() +\n   geom_text(\n     aes(x=x, y=y, label=area_name)\n   ) \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/grid_labels.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n### Plot `sf` gridmap object\n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8,9,10\"}\nmake_grid(france, n_row, n_col) |> \n   inner_join(solution) |>\n   ggplot() +\n   geom_sf() +\n   geom_text(\n     aes(x=x, y=y, label=area_name)\n   ) +\n   geom_point(\n     aes(x, y, size=perimeter)\n  )\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/grid_poly_point.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n### gridmap via `facet_grid()` \n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n![](img/bar.png){.absolute top=110 left=10 width=\"40%\"}\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/facet_bar.png){.absolute top=115 left=580 width=\"50%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n### gridmap via `facet_grid()` \n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,3,4,5,10\"}\nfrance_ods |> \n   ggplot() +\n   geom_col(\n    aes(x=rank, y=dist)\n   ) +\n  geom_text(\n    data=. %>% filter(o_name==d_name), \n    aes(x=x, y=y, label=d_name)\n  ) +\n  facet_wrap(~d_name) \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/facet_bar.png){.absolute top=115 left=580 width=\"50%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n\n### gridmap via `facet_grid()` \n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,3,4,5,10\"}\nfrance_ods |> \n   ggplot() +\n   geom_col(\n    aes(x=rank, y=dist)\n   ) +\n  geom_text(\n    data=. %>% filter(o_name==d_name), \n    aes(x=x, y=y, label=d_name)\n  ) +\n  facet_grid(-d_row~d_col) \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/bars_outline.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n### OD maps via `facet_grid()` + `sf` object\n  \n\n![](img/paper_od_map.png){.absolute top=130 left=10 width=\"50%\"}\n  ![](img/odmap_paper_france.png){.absolute top=130 left=600 width=\"35%\"}\n\n ![](img/odmap_paper_us.png){.absolute top=330 left=580 width=\"40%\"}\n\n::: footer\n\n:::\n\n---\n\n### OD maps via `facet_grid()` + `sf` object\n\n\n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code}\nfrance_ods |> \n  left_join(france, by=c(\"o_name\"=\"name\")) |>\n  ggplot() +\n  geom_sf(\n    data= . %>% filter(is_focus)\n    ) +\n  facet_grid(-d_row ~ d_col) \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/odmap_france_empty.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n### OD maps via `facet_grid()` + `sf` object\n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\nfrance_ods |> \n  left_join(france, by=c(\"o_name\"=\"name\")) |>\n  ggplot() +\n  geom_sf(\n    data= . %>% filter(is_focus)\n    ) +\n  geom_sf(aes(fill=dist)) +\n  facet_grid(-d_row ~ d_col) \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/odmap_france.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n### OD maps via `facet_grid()` + `sf` object\n  \n  \n:::{.columns}\n\n::: {.column width=\"40%\" style=\"font-size: 60%;\"}\n\n<br><br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nfrance_ods |> \n  left_join(france_grid, by=c(\"o_name\"=\"name\")) |>\n  ggplot() +\n  geom_sf(\n    data= . %>% filter(is_focus)\n    ) +\n  geom_sf(aes(fill=dist)) +\n  facet_grid(-d_row ~ d_col) \n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n![](img/odmap_france_grid.png){.absolute top=90 left=530 width=\"55%\"}\n\n\n::: \n:::  \n   \n::: footer\n\n:::\n  \n::: {.notes}\n  \n:::\n\n---\n\n# `tidyverse` for gridmap analysis\n\n---\n\n### `tidyverse` for gridmap analysis\n\n\nModel building with Census data \ngridmap code suggests *condition*   for models \n\n   \n::: footer\n\n:::\n\n---\n\n\n### `tidyverse` for gridmap analysis\n  \nwider ecosystem (purrr::) eases process of visually testing features\n  \n::: footer\n\n:::\n  \n::: {.notes}\n:::\n\n\n---\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}